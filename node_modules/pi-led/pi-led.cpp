#include <node/node.h>
#include <node/node_object_wrap.h>

// C standard library
#include <cstdlib>
#include <ctime>
#include <errno.h>

#include <stdint.h>
#include <stdlib.h>
#include <cstring>
#include <iostream>

using namespace std;
using namespace v8;
using namespace node;


extern "C"  {
#include "wiringPiSPI.h"
#include "wiringPi.h"
}

namespace {

struct Baton {
  Persistent<Function> callback;
  Persistent<Object> emitter;
  char *display_message;
  bool error;
  std::string error_message;
  int32_t result;
};

class PiLed: public ObjectWrap {
public:
  static Handle<Value> New(const Arguments& args);
  static Handle<Value> Cookies(const Arguments& args);
};

Handle<Value> PiLed::New(const Arguments& args) {
  HandleScope scope;
}

Handle<Value> PiLed::Cookies(const Arguments& args) {
  HandleScope scope;
  printf("Hello\n");
  
}

void RegisterModule(Handle<Object> target) {
   HandleScope scope;

  Local<FunctionTemplate> t = FunctionTemplate::New(PiLed::New);
  t->InstanceTemplate()->SetInternalFieldCount(1);
  t->SetClassName(String::New("PiLed"));
  NODE_SET_PROTOTYPE_METHOD(t, "Cookies", PiLed::Cookies);

  target->Set(String::NewSymbol("PiLed"), t->GetFunction());

}

NODE_MODULE(PiLed, RegisterModule);
}