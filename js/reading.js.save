    var recent_time = 0;
    var data_converted = [];
    var data_len_max = 100;
    var config = {};
    var signals = {};
    var conversions = {};
    var plot = [];
    var timing = {};
    var outputs = {};
    var nulldata = [[null],[null],[null],[null],[null],[null],[null],[null]];
    var check_run = null;
    var fetch_data = null;


    function plot_options(title,xlabel,ylabel,ymin,ymax){
        this.title = {
            text: title,
            show: true
        };
        this.axes = {
            xaxis: {
                renderer: $.jqplot.DateAxisRenderer,
                numberTicks: 4,
                tickOptions: {
                    formatString: "%I:%M:%S.%N"
                },
                label: xlabel,
                labelRenderer: $.jqplot.CanvasAxisLabelRenderer,
                labelOptions: {
                    show: true
                }
            },
            yaxis: {
                label: ylabel,
                labelRenderer: $.jqplot.CanvasAxisLabelRenderer,
                labelOptions: {
                    show: true
                },
                tickOptions:{
                    formatString: "%1.1f"
                },
                min: parseInt(ymin),
                max: parseInt(ymax)
            }
        };
        this.seriesDefaults = {
            showMarker: false
        };
    }

    function checkRunning(){
        $.ajax({
            url: '/data/checkrunning.php',
            dataType: 'json',
            success: function(msg){
                if (msg[0]){
                    toggleDisabled("startNewRun",0);
                    toggleDisabled("continueRun",0);
                    toggleDisabled("stopRun",1);  
                    fetchData(1); 
                    checkRun(0);            
                }
                else {
                    checkRun(1);
                }
                run_number = msg[1];
                //console.log("Check Running: "+msg);
            }
        })
    }

    function getConversions(){
        //conversions are indexed by signal type
        conversions = {};
        console.log("start: getConversions");
        $.ajax({
            url: '/data/conversions.php',
            dataType: 'json',
            success: function(vals){
                $.each(vals,function(k,v){
                    conversions[k] = {name: v["name"], equation: v["equation"]};
                })  
                console.log("finish: getConversions");
            }
        })
    }

    function getInputs(notdatasetup){
        console.log("start: getInputs");
        signals = {}
        $.ajax({
            url: '/data/measurements.php',
            dataType: 'json',
            success: function(vals) {
                signals = {};
                $.each(vals,function(k,v){
                    signals[k] = {name: v["name"], type: v["type"]};
                    if(!notdatasetup){
                        data_converted[k] = [];
                    }
                })
                console.log("finish: getInputs");

            }
        })
    }

    function getConfigs(){
        console.log("start: getConfigs");
        config = {};
        $.ajax({
            url: '/data/configs.php',
            dataType: 'json',
            success: function(vals){
                $.each(vals,function(k,v){
                    config[k] = {name: v["name"], plots: v["vars"]};
                })
                console.log("finish: getConfigs");
            }
        })
    }

    function setConfig(num){
        active_config = num;
        $(".plot").remove();
        $.each(config[num].plots, function(k,v){
            makePlot(k);
        });
    }

    function updateConfig(num,del){
        if(del){
            del = 1;
        }
        else{
            del = 0;
        }
        $.ajax({
            type: 'POST',
            url: '/data/config-u.php',
            dataType: 'json',
            async: false,
            data: {
                id: num,
                name: config[num].name,
                vars: config[num].plots,
                del: del
            }
        })
    }

    function createConfig(name){
        $.ajax({
            type: "POST",
            url: "data/config-u.php",
            async: false,
            data: {
                name: name,
                vars: {1: {
                    title: "Starter Plot",
                    signal_list: [null],
                    xaxislabel: "Time",
                    yaxislabel: "Magnitude",
                    timespan: 30,
                    ymax: 50,
                    ymin: 0
                    }
                }
            }
        })
    }

    function getData(){
        $.getJSON('/data/reading.php',function(vals) {
            if(vals["running"]){
                toggleDisabled("startNewRun",0);
                toggleDisabled("continueRun",0);
                toggleDisabled("stopRun",1);
            }
            else{
                toggleDisabled("startNewRun",1);
                toggleDisabled("continueRun",1);
                toggleDisabled("stopRun",0);
            }

            if( vals["timestamp"] != recent_time && vals["run"] == run_number ){
                recent_time = vals["timestamp"];
                var time = convertTime(vals["timestamp"]);
                $.each(signals, function(k,v){
                    var holder = data_converted[k];
                    if( holder.length == data_len_max ){
                        holder.shift();   
                    }
                    holder.push([time, convertData(vals["r"+k], signals[k].type)]);
                    data_converted[k] = holder;
                })
                console.log(data_converted);
                updatePlots();
            }
        })
    }

    function getOutputs(){
        outputs = {};
        $.ajax({
            url: '/data/outputs.php',
            dataType: 'json',
            success: function(vals){
                $.each(vals, function(k,v){
                    outputs[k] = {name: v["name"], pin: v["pin"]};
                })
            }
        })
    }

    function getTiming(){
        timing = {};
        $.ajax({
            url: '/data/timing.php',
            dataType: 'json',
            success: function(vals){
                $.each(vals, function(k,v){
                    timing[k] = {name: v["name"], state: v["state"], secs: v["secs"], fb_input: v["fb_input"], fb_value: v["fb_value"]};
                })
            }
        })
    }


    function convertTime(timestamp){
        return timestamp*1000;
    }

    function convertData(data,type){
        var x = data;
        return eval(conversions[type].equation);
    }

    function makePlot(num){
        $("#plot_wrapper").append("<div class='plot' id='plot"+num+"' style='height:300px;width:600px;'></div>");
        options = new plot_options(config[active_config].plots[num].title,config[active_config].plots[num].xaxislabel,config[active_config].plots[num].yaxislabel,config[active_config].plots[num].ymin,config[active_config].plots[num].ymax);
        plot[num] = $.jqplot("plot"+num,nulldata,options);
    }

    function updatePlots(){
        //need to make it so that if signals are removed from signal_list, they are removed from series data
        $.each(config[active_config].plots, function(k,v){
            $.each(v["signal_list"], function(i,l){
                if(typeof data_converted[l] != "undefined"){
                    plot[k].series[i].data = data_converted[l];
                }
            });
            plot[k].axes.xaxis.min = (recent_time - v["timespan"])*1000;            
            plot[k].axes.xaxis.max = recent_time*1000;
            plot[k].destroy();
            plot[k].replot();
        })
    }

    function sendStart(start,ext){
        if (start == 1 ){ start = "start"; fetchData(1);}
        if (start == 0 ){ start = "stop"; fetchData(0);}
        toggleDisabled("startNewRun");
        toggleDisabled("continueRun");
        toggleDisabled("stopRun");
        if((parseFloat($("#duration").val())!=NaN && parseFloat($("#sr").val())!=NaN) || start != "start"){
            $.ajax({
                type: 'POST',
                url: '/data/state.php',
                data: {
                    sr: parseFloat($("#sr").val()),
                    dur: parseFloat($("#duration").val()),
                    state: start,
                    ext: ext
                },
                success: function(msg){
                    if (start) {
                        run_number = parseInt(msg);
                    }
                }
            })
        }
    }

    function countObject(obj){
        var count = 0;
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                ++count;
            }
        }
        return count;
    }

    function toggleDisabled(elem_id,force){
        if($("#"+elem_id).hasClass("disabled")){
            if(typeof force === 'undefined' || force == true ){ 
                $("#"+elem_id).removeClass("disabled");
            }
        }
        else{
            if(typeof force === 'undefined' || force == false ){
                $("#"+elem_id).addClass("disabled");
            }
        }
    }

    function populatePlotEditFields(num){
        resetPlotEditFields();
        if(!isNaN(num)){
            $("#title").val(config[active_config].plots[num].title);
            $("#yaxislabel").val(config[active_config].plots[num].xaxislabel);
            $("#xaxislabel").val(config[active_config].plots[num].xaxislabel);
            $("#yaxislabel").val(config[active_config].plots[num].yaxislabel);
            $("#timespan").val(config[active_config].plots[num].timespan);
            $("#ymin").val(config[active_config].plots[num].ymin);
            $("#ymax").val(config[active_config].plots[num].ymax);
            $.each(config[active_config].plots[num].signal_list,function(k,v){
                $("#signallisting button[value="+v+"]").addClass("active");
            })
            toggleDisabled("delete_plot",1);
        }
        else{
            console.log("populate fields called with "+num);
            toggleDisabled("delete_plot",0);
        }
    }

    function populateStepEditFields(num){
        resetStepEditFields();
        if(!isNaN(num)){
            $("#control_name").val(timing[num].name);
            $("#control_dur").val(timing[num].secs);
            for(var i=1;i<=timing[num].state.length;i++){
                if(timing[num].state[i-1]){
                    $("#output"+i).addClass("active");
                }
            }
            toggleDisabled("delete_step",1);
            $("#fb_input").val(timing[num].fb_input);
            $("#fb_value").val(timing[num].fb_value);
        }
        else{
            console.log("populate step called with "+num);
            toggleDisabled("delete_step",0);
        }
    }

    function populateSigEditFields(num){
        resetSigEditFields();
        if(!isNaN(num)){
            $("#sig_name").val(signals[num].name);
            $("#sig_type").val(signals[num].type);
            toggleDisabled("delete_sig",1);
        }
        else{
            console.log("populate sig called with "+num);
            toggleDisabled("delete_sig",0);
        }        
    }

    function populateOutEditFields(num){
        resetOutEditFields();
        if(!isNaN(num)){
            $("#out_name").val(outputs[num].name);
            $("#out_pin").val(outputs[num].pin);
            toggleDisabled("delete_out",1);
        }
        else{
            console.log("populate sig called with "+num);
            toggleDisabled("delete_out",0);
        } 
    }

    function populateConvEditFields(num){
        resetConvEditFields();
        if(!isNaN(num)){
            $("#conv_name").val(conversions[num].name);
            $("#conv_eq").val(conversions[num].equation);
            toggleDisabled("delete_conv",1);
        }
        else{
            console.log("populate sig called with "+num);
            toggleDisabled("delete_conv",0);
        } 
    }

    function populateConfigEditFields(num){
        resetConfigEditFields();
        if(!isNaN(num)){
            $("#config_name").val(config[num].name);
            if(countObject(config)!=1){
                toggleDisabled("delete_config",1);
            }
            if(num!=active_config){
                toggleDisabled("apply_config",1);
            }
        }
        else{
            console.log("populate sig called with "+num);
            toggleDisabled("delete_conv",0);
            toggleDisabled("apply_conv",0);
        } 
    }

    function resetPlotEditFields(){
        $("#title").val("");
        $("#xaxislabel").val("");
        $("#yaxislabel").val("");
        $("#timespan").val("");
        $("#ymin").val("");
        $("#ymax").val("");
        $("#signallisting").find(".active").removeClass("active");
    }

    function resetStepEditFields(){
        $("#control_dur").val("");
        $("#control_name").val("");
        $("#fb_value").val("");
        $("#fb_input").val(0);
        //still need fb_input and fb_value
        $("#stepoptionscontainer").find(".active").removeClass("active");
    }

    function resetSigEditFields(){
        $("#sig_name").val("");
        $("#sig_type").val(0);
    }

    function resetOutEditFields(){
        $("#out_name").val("");
        $("#out_pin").val("");
    }

    function resetConvEditFields(){
        $("#conv_name").val("");
        $("#conv_eq").val("");
    }

    function resetConfigEditFields(){
        $("#config_name").val("");
        toggleDisabled("delete_conv",0);
        toggleDisabled("apply_conv",0);
    }

    function updateConfigName(){
        var num = $("#configlistingcontainer").find('.active').html();
        var name = $("#config_name").val();
        if( num == "+" ){
            createConfig(name);
        }
        else{
            config[num].name = name;
            updateConfig(num);
        }
        onHideChangeConfig();
        onShowChangeConfig();
    }

    function updatePlot(){
        var plot_num = $("#plotlistingcontainer").find(".active").html();
        var title = $("#title").val();
        var xaxislabel = $("#xaxislabel").val();
        var yaxislabel = $("#yaxislabel").val();
        var timespan = $("#timespan").val();
        var ymin = $("#ymin").val();
        var ymax = $("#ymax").val();
        var signal_list = [];
        $("#signallisting").find(".active").each(function(){
            signal_list.push($(this).html());
        })
        if( plot_num == "+" ){
            plot_num = countObject(config[active_config].plots)+1;
            config[active_config].plots[plot_num] = {};

        }
        config[active_config].plots[plot_num].title = title;
        config[active_config].plots[plot_num].xaxislabel = xaxislabel;
        config[active_config].plots[plot_num].yaxislabel = yaxislabel;
        config[active_config].plots[plot_num].timespan = timespan;
        config[active_config].plots[plot_num].ymin = ymin;
        config[active_config].plots[plot_num].ymax = ymax;
        config[active_config].plots[plot_num].signal_list = signal_list;
        updateConfig(active_config);
        $("#plot_wrapper").empty();
        setConfig(active_config);
        onHideEditPlots();
        onShowEditPlots();
    }

    function updateStep(){
        var num = $("#steplistingcontainer").find('.active').html();
        var name = $("#control_name").val();
        var secs = $("#control_dur").val();
        if($("#fb_input").val()>0){
            var fb_value = $("#fb_value").val();
            var fb_input = $("#fb_input").val();
        }
        else{
            var fb_value = 0;
            var fb_input = 0;
        }     
        var state = [];
        $("button[id*='output']").each(function(){
            if($(this).hasClass('active')){
                state.push(1);
            }
            else{
                state.push(0);
            }
        })
        if( num == "+" ){
            num = countObject(timing)+1;
            timing[num] = {};
        }
        timing[num].name = name;
        timing[num].state = state;
        timing[num].secs = secs;
        timing[num].fb_value = fb_value;
        timing[num].fb_input = fb_input;
        updateTiming();
        onHideEditControls();
        onShowEditControls();
    }

    function updateSignal(){
        var num = $("#siglistingcontainer").find('.active').html();
        var name = $("#sig_name").val();
        var type = $("#sig_type").val();
        if( num == "+" ){
            num = countObject(signals)+1;
            signals[num] = {};
        }
        signals[num].name = name;
        signals[num].type = type;
        updateSignals(num);
        onHideEditSignals();
        onShowEditSignals();
    }

    function updateOutput(){
        var num = $("#outlistingcontainer").find('.active').html();
        var name = $("#out_name").val();
        var pin = $("#out_pin").val();
        if( num == "+" ){
            num = countObject(outputs)+1;
            outputs[num] = {};
        }
        outputs[num].name = name;
        outputs[num].pin = pin;
        updateOutputs(num);
        onHideEditOutputs();
        onShowEditOutputs();
    }

    function updateConversion(){
        var num = $("#convlistingcontainer").find('.active').html();
        var name = $("#conv_name").val();
        var eq = $("#conv_eq").val();
        if( num == "+" ){
            num = countObject(conversions)+1;
            conversions[num] = {};
        }
        conversions[num].name = name;
        conversions[num].equation = eq;
        updateConversions(num);
        onHideEditConversions();
        onShowEditConversions();
    }

    function updateSignals(num, del){
        if(del){
            del = 1;
        }
        else{
            del = 0;
        }
        $.ajax({
            type: 'post',
            async: false,
            url: '/data/measurements-u.php',
            data: { 
                id: num,
                name: signals[num].name,
                type: signals[num].type,
                del: del
            },
            success: function(msg){
                console.log(msg);
            }
        })
        getInputs();
    }

    function updateOutputs(num,del){
        if(del){
            del = 1;
        }
        else{
            del = 0;
        }
        $.ajax({
            type: 'post',
            url: '/data/outputs-u.php',
            async: false,
            data: { 
                id: num,
                name: outputs[num].name,
                pin: outputs[num].pin,
                del: del
            },
            success: function(msg){
                console.log(msg);
            }
        })
        getOutputs();
    }

    function updateConversions(num,del){
        if(del){
            del = 1;
        }
        else{
            del = 0;
        }
        $.ajax({
            type: 'post',
            url: '/data/conversions-u.php',
            async: false,
            data: { 
                id: num,
                name: conversions[num].name,
                eq: conversions[num].equation,
                del: del
            },
            success: function(msg){
                console.log(msg);
            }
        })
        getConversions();
    }

    function updateTiming(){
        $.ajax({
            type: 'post',
            url: '/data/timing-u.php',
            data: { vars : timing },
            async: false,
            success: function(msg){
                console.log(msg);
            }
        })
        getTiming();
    }

    function deleteSignal(){
        updateSignals($("#siglistingcontainer").find('.active').html(),1);
        onHideEditSignals();
        onShowEditSignals();
    }

    function deleteOutput(){
        updateOutputs($("#outlistingcontainer").find('.active').html(),1);
        onHideEditOutputs();
        onShowEditOutputs();
    }

    function deleteConversion(){
        updateConversions($("#convlistingcontainer").find('.active').html(),1);
        onHideEditOutputs();
        onShowEditOutputs();        
    }

    function deletePlot(){
        var plot_num = $("#plotlistingcontainer").find(".active").html();
        delete config[active_config].plots[plot_num];
        var plots_temp = {};
        var i = 1;
        $.each(config[active_config].plots, function(k,v){
            plots_temp[i.toString()] = v;
            i++;
        })
        config[active_config].plots = plots_temp;
        updateConfig(active_config);
        $("#plot_wrapper").empty();
        setConfig(active_config); 
        onHideEditPlots();
        onShowEditPlots();
    }

    function deleteStep(){
        var num = $("#steplistingcontainer").find(".active").html();
        delete timing[num];
        var steps_temp = {};
        var i = 1;
        $.each(timing, function(k,v){
            steps_temp[i.toString()] = v;
            i++;
        })
        timing = steps_temp;
        updateTiming();
        onHideEditControls();
        onShowEditControls();
    }

    function fetchData(opt){
        if(opt && fetch_data === null){
            fetch_data = setInterval('getData()',1000);
        }
        else if(!opt){
            clearInterval(fetch_data);
            fetch_data = null;
        }
    }

    function checkRun(opt){
        if(opt && check_run === null){
            check_run = setInterval('checkRunning()',1000);
        }
        else if(!opt){
            clearInterval(check_run);
            check_run = null;
        }
    }

    function onShowEditPlots(){
        $.each(config[active_config].plots,function(k,v){
            $("#plotlistingcontainer").append("<button class='btn select_plot_to_edit' value='"+k+"' title='"+v['title']+"'>"+k+"</button>");
        });
        $("#plotlistingcontainer").append("<button class='btn select_plot_to_edit' value='new' title='Create New'>+</button>");
        var m = 1;
        var s = "";
        $.each(signals, function(k,v){
            if(m % 6 == 1){
                s = s+"<div class='btn-group' data-toggle='buttons-checkbox'><button type='button' class='btn select_signal_to_display' value='"+k+"' title='"+v['name']+"'>"+k+"</button>";
            }
            else if(m % 6 == 0 || m == countObject(signals)){
                s = s+"<button type='button' class='btn plot_option' value='"+k+"' title='"+v['name']+"'>"+k+"</button></div><br>";                    
            }
            else{
                s = s+"<button type='button' class='btn plot_option' value='"+k+"' title='"+v['name']+"'>"+k+"</button>";                    
            }
            m++;
        })
        $("#signallisting").html(s)
    }

    function onHideEditPlots(){
        $("#plotlistingcontainer").empty();
        resetPlotEditFields();
    }

    function onShowEditControls(){
        var s = "";
        var divcount = countObject(outputs);
        $("#stepoptionscontainer").append('<div class="control-group"><label class="control-label" for="control_name">Name (opt)</label><div class="controls"><input type="text" placeholder="Name" id="control_name"></div></div>');
        $("#stepoptionscontainer").append('<div class="control-group"><label class="control-label" for="control_dur">Duration (s)</label><div class="controls"><input type="number" placeholder="25" id="control_dur"></div></div>');

        $.each(timing,function(k,v){
            $("#steplistingcontainer").append("<button class='btn select_step_to_edit' value='"+k+"' title='"+v['name']+"'>"+k+"</button>");
        })
        $("#steplistingcontainer").append("<button class='btn select_step_to_edit' value='new' title='Create New'>+</button>");

        for(var i=1;i<=divcount;i++){
            s = s + '<div class="control-group"><label class="control-label" for="output'+i+'">'+outputs[i].name+'</label><div class="controls btn-controls" data-toggle="buttons-checkbox"><button type="button" id="output'+i+'" class="btn btn-wide">Enabled</button></div></div>';
        }
        $("#stepoptionscontainer").append(s);
        s = '<option value="0">(optional)</option>';
        $.each(signals,function(k,v){
            s = s+'<option value="'+k+'">'+k+' - '+v["name"]+'</option>';
        })
        $("#stepoptionscontainer").append('<div class="control-group"><label class="control-label" for="fb_input">Override Signal</label><div class="controls"><select id="fb_input">'+s+'</select></div></div>');
        $("#stepoptionscontainer").append('<div class="control-group"><label class="control-label" for="fb_value">Override Threshold</label><div class="controls"><input type="number" id="fb_value" placeholder="512"></div></div>')
    }

    function onHideEditControls(){
        $("#steplistingcontainer").empty();
        $("#stepoptionscontainer").empty();
    }

    function onShowEditSignals(){
        $.each(signals,function(k,v){
            $("#siglistingcontainer").append("<button class='btn select_sig_to_edit' value='"+k+"' title='"+v['name']+"'>"+k+"</button>");
        })
        $("#siglistingcontainer").append("<button class='btn select_sig_to_edit' value='new' title='Create New'>+</button>");

        s = '<option value="0">(not optional)</option>';
        $.each(conversions,function(k,v){
            s = s+'<option value="'+k+'">'+k+' - '+v["name"]+'</option>';
        })
        $("#sig_type").html(s);
    }

    function onHideEditSignals(){
        $("#siglistingcontainer").empty();
        resetSigEditFields();    
    }

    function onShowEditConversions(){
        $.each(conversions,function(k,v){
            $("#convlistingcontainer").append("<button class='btn select_conv_to_edit' value='"+k+"' title='"+v['name']+"'>"+k+"</button>");
        })
        $("#convlistingcontainer").append("<button class='btn select_conv_to_edit' value='new' title='Create New'>+</button>");
    }

    function onHideEditConversions(){
        $("#convlistingcontainer").empty();
        resetConvEditFields();
    }

    function onShowEditOutputs(){
        $.each(outputs,function(k,v){
            $("#outlistingcontainer").append("<button class='btn select_out_to_edit' value='"+k+"' title='"+v['name']+"'>"+k+"</button>");
        })
        $("#outlistingcontainer").append("<button class='btn select_out_to_edit' value='new' title='Create New'>+</button>");
    }

    function onHideEditOutputs(){
        $("#outlistingcontainer").empty();
        resetOutEditFields();
    }

    function onShowChangeConfig(){
        $.each(config,function(k,v){
            $("#configlistingcontainer").append("<button class='btn select_config_to_edit' value='"+k+"' title='"+v['name']+"'>"+k+"</button>");
        })
        $("#configlistingcontainer").append("<button class='btn select_config_to_edit' value='new' title='Create New'>+</button>");

    }

    function onHideChangeConfig(){
        $("#configlistingcontainer").empty();
        resetConfigEditFields();
        $.ajaxSetup({
            async: false
        })
        getConfigs();
        $.ajaxSetup({
            async: true
        })
    }


    $(document).ready(function(){
        $.ajaxSetup({
            async: false
        })

        getInputs();
        getConversions();
        getConfigs();
        setConfig(1);
        getOutputs();
        getTiming();
        checkRunning();


        $.ajaxSetup({
            async: true
        })
                

        $('#plot_editor').on('show', function () {
            onShowEditPlots();
        })
        .on('hidden', function(){
            onHideEditPlots();
        })

        $('#controls_editor').on('show', function () {
            onShowEditControls();
        })
        .on('hidden', function(){
            onHideEditControls();
        })

        $('#signals_editor').on('show', function () {
            onShowEditSignals();
        })
        .on('hidden', function(){
            onHideEditSignals();
        })            

        $('#conversions_editor').on('show', function () {
            onShowEditConversions();
        })
        .on('hidden', function(){
            onHideEditConversions();
        })

        $('#outputs_editor').on('show', function () {
            onShowEditOutputs();
        })
        .on('hidden', function(){
            onHideEditOutputs();
        })

        $('#config_changer').on('show', function () {
            onShowChangeConfig();
        })
        .on('hidden', function(){
            onHideChangeConfig();
        })        

        $("#startNewRun").click(function(){
            if(!$(this).hasClass("disabled")){
                sendStart(1,0);
            }
        })
        $("#continueRun").click(function(){
            if(!$(this).hasClass("disabled")){
                sendStart(1,1);
            }        
        })
        $("#stopRun").click(function(){
            if(!$(this).hasClass("disabled")){
                sendStart(0,0);
            }
        })

        $(document).on('click','.select_plot_to_edit',function(){
            var num = $(this).html();
            populatePlotEditFields(num);
        })

        $(document).on('click','.select_step_to_edit',function(){
            var num = $(this).html();
            populateStepEditFields(num);
        })

        $(document).on('click','.select_sig_to_edit',function(){
            var num = $(this).html();
            populateSigEditFields(num);
        })

        $(document).on('click','.select_out_to_edit',function(){
            var num = $(this).html();
            populateOutEditFields(num);
        })                

        $(document).on('click','.select_conv_to_edit',function(){
            var num = $(this).html();
            populateConvEditFields(num);
        })

        $(document).on('click','.select_config_to_edit',function(){
            var num = $(this).html();
            populateConfigEditFields(num);
        })


        $("#update_plot").click(function(){
            updatePlot();
        })

        $("#delete_plot").click(function(){
            deletePlot();
        })

        $("#update_step").click(function(){
            updateStep();
        })

        $("#delete_step").click(function(){
            deleteStep();
        })

        $("#update_sig").click(function(){
            updateSignal();
        })

        $("#delete_sig").click(function(){
            deleteSignal();
        })

        $("#update_out").click(function(){
            updateOutput();
        })

        $("#delete_out").click(function(){
            deleteOutput();
        })   

         $("#update_conv").click(function(){
            updateConversion();
        })

        $("#delete_conv").click(function(){
            deleteConversion();
        }) 

        $("#update_config").click(function(){
            updateConfigName();
        })

        $("#delete_config").click(function(){
            if(!$(this).hasClass("disabled")){
                updateConfig($("#configlistingcontainer").find('.active').html(),1);
                onHideChangeConfig();
                onShowChangeConfig();
            }
        })                 

         $("#apply_config").click(function(){
            setConfig($("#configlistingcontainer").find('.active').html());
        })

    })
